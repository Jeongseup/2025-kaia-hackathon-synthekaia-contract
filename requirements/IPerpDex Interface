// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title IPerpDex
 * @dev Simplified interface for the PerpDex contract, focusing on opening a short position.
 * This captures the necessary structures and functions from the provided PerpDex.sol.
 */
interface IPerpDex {
    // Enum definitions mirrored from PerpDex.sol for compatibility.
    enum TokenType { Btc, Klay, Wemix, Eth, Doge, Pepe, Sol, Xrp, Apt, Sui, Shib, Sei, Ada, Pol, Bnb, Dot, Ltc, Avax, Trump }
    enum OracleType { BisonAI, Pyth }

    // Struct for price data, simplified for our use case.
    struct OraclePrices {
        OracleType oracleType;
        bytes32[] feedHashes;
        int256[] answers;
        uint256[] timestamps;
        bytes[] proofs;
    }

    // Struct for opening a position, mirrored from PerpDex.sol.
    struct OpenPositionData {
        TokenType tokenType;
        uint256 marginAmount; // in USDT (6 decimals)
        uint256 leverage;
        bool long; // false for short position
        address trader; // In our case, this will be the HybridStrategyManager contract
        OraclePrices priceData;
        uint256 tpPrice;
        uint256 slPrice;
        uint256 expectedPrice;
        bytes userSignedData; // Can be empty if the admin is calling
    }

    /**
     * @notice Opens a new position on the perpetuals exchange.
     * @param o The data required to open the position.
     * @dev This function requires the contract to have approved the PerpDex to spend USDT for the margin.
     */
    function openPosition(OpenPositionData calldata o) external payable;
}

